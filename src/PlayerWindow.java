import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.awt.event.ActionEvent;

/**
 *
 * @author manoel
 */
public class PlayerWindow extends javax.swing.JFrame {

    /**
     * Creates new form PlayerWindow
     */
    public PlayerWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jScrollPane3 = new JScrollPane();
        songTable = new JTable();
        jTree1 = new JTree();
        inferiorPanel = new JPanel();
        separatorLabel = new JLabel();
        startTimeLabel = new JLabel();
        endTimeLabel = new JLabel();
        timeSlider = new JSlider();
        volumeSlider = new JSlider();
        selectFolder = new JButton();
        playPauseButton = new JButton();
        previousButton = new JButton();
        nextButton = new JButton();
        replayButton = new JButton();
        stopButton = new JButton();
        muteButton = new JButton();
        appPlayer = new AppPlayer();
        isMuted = false;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jTree1.setBackground(Color.LIGHT_GRAY);
        inferiorPanel.setBackground(new Color(30, 80, 128));

        selectFolder.setText("Select Folder");
        selectFolder.addActionListener(evt -> selectFolderActionPerformed(evt));

        /** Adds a listener to check the status of the slider*/
        timeSlider.addChangeListener(e -> {
            JSlider source = (JSlider) e.getSource();
            if(!source.getValueIsAdjusting()){
                double time = (double)source.getValue()/100.0;
                appPlayer.skip(time);
            }
        });

        songTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Song", "Album", "Artist", "Size"
                }
        ));
        jScrollPane1.setViewportView(songTable);
        jScrollPane3.setViewportView(jTree1);

        startTimeLabel.setText("00:00");
        startTimeLabel.setForeground(Color.WHITE);
        endTimeLabel.setText("00:00");
        endTimeLabel.setForeground(Color.WHITE);


        separatorLabel.setText("/");
        separatorLabel.setForeground(Color.WHITE);

        // ----------------------Buttons configuration ------------------------- //
        playPauseButton.setIcon(new ImageIcon("res/pause.png"));
        playPauseButton.setContentAreaFilled(false);
        playPauseButton.addActionListener(new ActionListener() {
            boolean isPlaying = true;
            ImageIcon pauseIcon = new ImageIcon("res/play.png");
            ImageIcon playIcon = new ImageIcon("res/pause.png");
            @Override
            public void actionPerformed( ActionEvent arg0 )
            {
                if(isPlaying){
                    System.out.println("Paused pressed");
                    playPauseButton.setIcon(pauseIcon);
                }else{
                    System.out.println("Play pressed");
                    playPauseButton.setIcon(playIcon);
                }
                isPlaying = !isPlaying;
            }
        });

        stopButton.setIcon(new ImageIcon("res/stop.png"));
        stopButton.setBackground(new Color(30, 80, 128));
        stopButton.setContentAreaFilled(false);
        stopButton.addActionListener(evt -> stopButtonActionPerformed(evt));

        muteButton.setIcon(new ImageIcon("res/sound_on.png"));
        muteButton.setBackground(new Color(30, 80, 128));
        muteButton.setContentAreaFilled(false);
        muteButton.addActionListener(new ActionListener() {
            boolean isMuted = true;
            ImageIcon muteIcon = new ImageIcon("res/sound_off.png");
            ImageIcon unmuteIcon = new ImageIcon("res/sound_on.png");
            @Override
            public void actionPerformed( ActionEvent arg0 )
            {
                if(isMuted){
                    System.out.println("Unmute pressed");
                    muteButton.setIcon(muteIcon);
                    appPlayer.changeMuteStatus(isMuted);
                    isMuted = false;
                }else{
                    System.out.println("Mute pressed");
                    muteButton.setIcon(unmuteIcon);
                    appPlayer.changeMuteStatus(isMuted);
                    isMuted = true;
                }
            }
        });
        previousButton.setIcon(new ImageIcon("res/previous.png"));
        previousButton.setBackground(new Color(30, 80, 128));
        previousButton.setContentAreaFilled(false);
        previousButton.addActionListener(evt -> previousButtonActionPerformed(evt));

        nextButton.setIcon(new ImageIcon("res/next.png"));
        nextButton.setBackground(new Color(30, 80, 128));
        nextButton.setContentAreaFilled(false);
        nextButton.addActionListener(evt -> nextButtonActionPerformed(evt));

        replayButton.setIcon(new ImageIcon("res/replay.png"));
        replayButton.setBackground(new Color(30, 80, 128));
        replayButton.setContentAreaFilled(false);
        replayButton.addActionListener(evt -> replayButtonActionPerformed(evt));

        //----------------------End of Button Configuration----------------------//


        //---------------------------------------- Audio control layout -----------------------------------------//
        javax.swing.GroupLayout inferiorPanelLayout = new javax.swing.GroupLayout(inferiorPanel);
        inferiorPanel.setLayout(inferiorPanelLayout);
        inferiorPanelLayout.setHorizontalGroup(
                inferiorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(inferiorPanelLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(startTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(separatorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endTimeLabel)
                                .addGap(24, 24, 24)
                                .addComponent(replayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(playPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(muteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(inferiorPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(timeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        inferiorPanelLayout.setVerticalGroup(
                inferiorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inferiorPanelLayout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(timeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(inferiorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(nextButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(muteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(playPauseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stopButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(previousButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(inferiorPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(inferiorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(inferiorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(startTimeLabel)
                                                                .addComponent(endTimeLabel)
                                                                .addComponent(separatorLabel))))
                                        .addComponent(replayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inferiorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(selectFolder)
                                                .addGap(42, 42, 42)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(selectFolder)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inferiorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }

    //---------------------------------------- End of audio control layout -----------------------------------------//

    /** This is audio file chooser event handler. The filter narrows the options to the three formats below.
     * If the file chooser has executed successfully the AppPlayer will receive the song
     * and make it ready to play.*/
    private void selectFolderActionPerformed(java.awt.event.ActionEvent evt) {
        //FileFilter filter = new FileNameExtensionFilter("Audio Files", "mp3", "wma", "flac");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //fileChooser.addChoosableFileFilter(filter);
        //fileChooser.setFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(null);

        if(returnValue == JFileChooser.APPROVE_OPTION){
            File songFile = fileChooser.getSelectedFile();
            if(songFile.isDirectory())
                System.out.println("Diretorio escolhido: "+songFile.getName());
            //pathField.setText(songFile.getPath());
//            String path = null;
//            try {
//                path = songFile.toURI().toURL().toString();
//            } catch (MalformedURLException e) {
//                e.printStackTrace();
//            }
            //appPlayer.setSong();
        }
    }

    /** Stop Button event handler*/
    private void stopButtonActionPerformed(ActionEvent evt) {
        System.out.println("Stop pressed");
        //appPlayer.stopSong();
    }

    private void previousButtonActionPerformed(ActionEvent evt) {
        System.out.println("previous pressed");
    }

    private void nextButtonActionPerformed(ActionEvent evt) {
        System.out.println("next pressed");
    }

    private void replayButtonActionPerformed(ActionEvent evt) {
        System.out.println("replay pressed");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //UIManager.put("nimbusBase", new Color(255,0,0));
        //UIManager.put("nimbusBlueGrey", new Color(0,255,0));
        UIManager.put("control", Color.LIGHT_GRAY);
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerWindow().setVisible(true);
            }
        });
    }

    // Variables declaration
    private JLabel startTimeLabel;
    private JLabel endTimeLabel;
    private JLabel separatorLabel;
    private JPanel inferiorPanel;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane3;
    private JTree jTree1;
    private JButton muteButton;
    private JButton stopButton;
    private JButton previousButton;
    private JButton nextButton;
    private JButton replayButton;
    private JButton playPauseButton;
    private JButton selectFolder;
    private JTable songTable;
    private JSlider timeSlider;
    private JSlider volumeSlider;
    private boolean isMuted;
    private AppPlayer appPlayer;
    // End of variables declaration
}
